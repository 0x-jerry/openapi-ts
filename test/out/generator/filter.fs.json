{
  "/api/gen/clients.ts": "// @ts-ignore
// @ts-nocheck

import { _request, type RequestConfig } from '../../../_adapter.ts'

export interface TypeModel {
    ApiGenClientsGetResponse: string[];
    [property: string]: any;
}


/**
* Gets languages supported by the client generator
*
* 
*
* url path: /api/gen/clients
* @tags clients
*/
export const $get = (config?: RequestConfig) => {
    return _request<TypeModel["ApiGenClientsGetResponse"]>({
      method: 'get',
    url: `/api/gen/clients`,
config,
    })
  }

export * from './clients/index.ts'",
  "/api/gen/clients/_language.ts": "// @ts-ignore
// @ts-nocheck

import { _request, type RequestConfig } from '../../../../_adapter.ts'

export interface TypeModel {
    ApiGenClientsLanguageGetParam:        APIGenClientsLanguageGetParam;
    ApiGenClientsLanguageGetResponse:     { [key: string]: CLIOption };
    ApiGenClientsLanguagePostParam:       APIGenClientsLanguagePostParam;
    ApiGenClientsLanguagePostRequestBody: GeneratorInput;
    ApiGenClientsLanguagePostResponse:    ResponseCode;
    [property: string]: any;
}

export interface APIGenClientsLanguageGetParam {
    /**
     * The target language for the client library
     */
    language: string;
    [property: string]: any;
}

export interface CLIOption {
    default?:     string;
    description?: string;
    enum?:        { [key: string]: string };
    opt?:         string;
    optValue?:    string;
    type?:        string;
    [property: string]: any;
}

export interface APIGenClientsLanguagePostParam {
    /**
     * The target language for the client library
     */
    language: string;
    [property: string]: any;
}

export interface GeneratorInput {
    authorizationValue?: AuthorizationValue;
    openAPIUrl?:         string;
    options?:            { [key: string]: string };
    spec?:               { [key: string]: any };
    [property: string]: any;
}

export interface AuthorizationValue {
    keyName?:    string;
    type?:       string;
    urlMatcher?: { [key: string]: any };
    value?:      string;
    [property: string]: any;
}

export interface ResponseCode {
    /**
     * File download code
     */
    code?: string;
    /**
     * URL for fetching the generated client
     */
    link?: string;
    [property: string]: any;
}


/**
* Returns options for a client library
*
* 
*
* url path: /api/gen/clients/{language}
* @tags clients
*/
export const $get = (params: TypeModel["ApiGenClientsLanguageGetParam"], config?: RequestConfig) => {
    return _request<TypeModel["ApiGenClientsLanguageGetResponse"]>({
      method: 'get',
    url: `/api/gen/clients/${params.language}`,
config,
    })
  }

/**
* Generates a client library
*
* Accepts a `GeneratorInput` options map for spec location and generation options
*
* url path: /api/gen/clients/{language}
* @tags clients
*/
export const $post = (params: TypeModel["ApiGenClientsLanguagePostParam"], data: TypeModel["ApiGenClientsLanguagePostRequestBody"], config?: RequestConfig) => {
    return _request<TypeModel["ApiGenClientsLanguagePostResponse"]>({
      method: 'post',
    url: `/api/gen/clients/${params.language}`,
    body: data,
config,
    })
  }",
  "/api/gen/clients/index.ts": "//@ts-ignore
//@ts-nocheck
export * as _language from './_language.ts'",
  "/api/gen/index.ts": "//@ts-ignore
//@ts-nocheck
export * as clients from './clients.ts'",
  "/api/index.ts": "//@ts-ignore
//@ts-nocheck
export * as gen from './gen'",
  "/index.ts": "//@ts-ignore
//@ts-nocheck
export * as api from './api'",
}